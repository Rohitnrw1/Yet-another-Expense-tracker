\documentclass[10pt, a4paper]{article}
% --- UNIVERSAL PREAMBLE BLOCK ---
% Setup for the document environment
\usepackage[a4paper, top=2.5cm, bottom=2.5cm, left=2cm, right=2cm]{geometry}
\usepackage{fontspec}

% Set up Babel with English as the main language
\usepackage[english, bidi=basic, provide=*]{babel}
\babelprovide[import, onchar=ids fonts]{english}

% Set default/Latin font to Noto Sans
\babelfont{rm}{Noto Sans}

% Packages for code listing and coloring
\usepackage{listings}
\usepackage{xcolor}

% Configuration for the listings environment
\lstset{
    basicstyle=\footnotesize\ttfamily, % Font size and style
    keywordstyle=\color[rgb]{0.0,0.0,0.5}\bfseries, % Keywords in bold blue
    commentstyle=\color[rgb]{0.5,0.5,0.5}\itshape, % Comments in gray italic
    stringstyle=\color[rgb]{0.6,0.2,0.0}, % Strings in brown/orange
    numberstyle=\tiny\color[rgb]{0.5,0.5,0.5},
    showspaces=false,
    showtabs=false,
    frame=single,
    rulecolor=\color{black!10},
    tabsize=2,
    breaklines=true,
    breakatwhitespace=true,
    language=JavaScript, % Specify the language for syntax highlighting
    caption={Source Code for ExpenseManager.jsx},
    label={lst:expensereact},
    lineskip={-0.5pt}
}

\title{Expense Manager: React Source Code Listing}
\author{Generated by Gemini}
\date{\today}

\begin{document}

\maketitle

\section*{Code Listing: ExpenseManager.jsx}

\begin{lstlisting}
import React, { useState, useEffect, useMemo, useCallback } from 'react';
import { initializeApp } from 'firebase/app';
import { getAuth, signInAnonymously, signInWithCustomToken, onAuthStateChanged } from 'firebase/auth';
import { getFirestore, doc, setDoc, collection, query, onSnapshot, updateDoc, deleteDoc, addDoc, serverTimestamp, getDocs, where, limit } from 'firebase/firestore';
import { Settings, Home, ListChecks, PieChart, Plus, X, Pencil, DollarSign, Calendar, Landmark, CreditCard, ShoppingBag, Lightbulb, Utensils, Droplet, User, Banknote } from 'lucide-react';

// --- GLOBAL FIREBASE CONFIGURATION (MANDATORY) ---
const appId = typeof __app_id !== 'undefined' ? __app_id : 'default-app-id';
const firebaseConfig = typeof __firebase_config !== 'undefined' ? JSON.parse(__firebase_config) : {};
const initialAuthToken = typeof __initial_auth_token !== 'undefined' ? __initial_auth_token : null;

// --- UTILITY FUNCTIONS ---

/**
 * Converts a hex color to an array of RGB values [r, g, b].
 * @param {string} hex - The hex color string (e.g., "#A1C9A1").
 */
const hexToRgb = (hex) => {
    const bigint = parseInt(hex.slice(1), 16);
    const r = (bigint >> 16) & 255;
    const g = (bigint >> 8) & 255;
    const b = bigint & 255;
    return [r, g, b];
};

/**
 * Generates a contrast color (black or white) for text based on the background color.
 * @param {string} hex - The background hex color.
 */
const getContrastColor = (hex) => {
    const [r, g, b] = hexToRgb(hex);
    // Calculate relative luminance
    const luminance = (0.299 * r + 0.587 * g + 0.114 * b) / 255;
    return luminance > 0.5 ? '#000000' : '#FFFFFF';
};

/**
 * Maps a string icon name to its Lucide component.
 * @param {string} name - The icon name string.
 */
const getIconComponent = (name) => {
    switch (name) {
        case 'ShoppingBag': return ShoppingBag;
        case 'Lightbulb': return Lightbulb;
        case 'Utensils': return Utensils;
        case 'Droplet': return Droplet;
        case 'CreditCard': return CreditCard;
        case 'Banknote': return Banknote;
        default: return DollarSign;
    }
};

/**
 * Calculates the current budget cycle start and end dates.
 * This simplifies multi-month budgeting by creating rolling cycles.
 * @param {Date} budgetDate - The date the budget was created.
 * @param {number} cycleMonths - The duration of the cycle in months (1, 2, 3...).
 */
const getCurrentCycleDates = (budgetDate, cycleMonths) => {
    const now = new Date();
    let currentCycleStart = new Date(budgetDate.getFullYear(), budgetDate.getMonth(), budgetDate.getDate());

    // Advance the start date until it's the start of the current cycle
    while (currentCycleStart < now) {
        let nextCycleStart = new Date(currentCycleStart);
        nextCycleStart.setMonth(nextCycleStart.getMonth() + cycleMonths);

        if (nextCycleStart > now) {
            return {
                start: currentCycleStart,
                end: nextCycleStart
            };
        }
        currentCycleStart = nextCycleStart;
    }

    // Fallback if budgetDate is in the future (shouldn't happen with serverTimestamp)
    return { start: budgetDate, end: new Date(budgetDate.getFullYear(), budgetDate.getMonth() + cycleMonths, budgetDate.getDate()) };
};

// --- CHART COMPONENTS ---

/**
 * Renders a simple Pie Chart for budget vs. expense summary.
 * Uses SVG for drawing.
 */
const PieChartComponent = ({ data }) => {
    const total = data.reduce((sum, item) => sum + item.value, 0);
    if (total === 0) {
        return <div className="text-center p-8 text-gray-500">No data to display in the chart.</div>;
    }

    let currentAngle = 0;
    const segments = data.map((item, index) => {
        const percentage = item.value / total;
        const angle = percentage * 360;
        const largeArcFlag = angle > 180 ? 1 : 0;
        const x1 = 50 + 40 * Math.cos(Math.PI * (currentAngle - 90) / 180);
        const y1 = 50 + 40 * Math.sin(Math.PI * (currentAngle - 90) / 180);
        currentAngle += angle;
        const x2 = 50 + 40 * Math.cos(Math.PI * (currentAngle - 90) / 180);
        const y2 = 50 + 40 * Math.sin(Math.PI * (currentAngle - 90) / 180);

        const d = `M 50 50 L ${x1} ${y1} A 40 40 0 ${largeArcFlag} 1 ${x2} ${y2} Z`;

        return (
            <path
                key={index}
                d={d}
                fill={item.color}
                className="transition-all duration-300 hover:opacity-80"
            />
        );
    });

    return (
        <div className="flex flex-col items-center">
            <svg width="200" height="200" viewBox="0 0 100 100" className="shadow-lg rounded-full">
                {segments}
                <circle cx="50" cy="50" r="25" fill="#f8fafc" /> {/* Inner circle for donut look */}
            </svg>
            <div className="flex flex-wrap justify-center mt-4 p-2 gap-x-4 gap-y-2">
                {data.map((item, index) => (
                    <div key={index} className="flex items-center text-sm">
                        <span className="w-3 h-3 rounded-full mr-2" style={{ backgroundColor: item.color }}></span>
                        {item.name}: **{(item.value / total * 100).toFixed(1)}%**
                    </div>
                ))}
            </div>
        </div>
    );
};

/**
 * Renders a Bar Chart for expense comparison.
 * Uses SVG for drawing.
 */
const BarChartComponent = ({ data, cycleLength, currency }) => {
    if (data.length === 0) {
        return <div className="text-center p-8 text-gray-500">Not enough data for comparison.</div>;
    }

    const values = data.map(d => d.totalExpense);
    const maxValue = Math.max(...values, 100);
    const barWidth = 60 / data.length; // Max 60% width

    return (
        <div className="p-4 bg-white/50 rounded-xl shadow-inner max-w-full overflow-x-auto">
            <h3 className="text-lg font-semibold mb-3">
                Expense Comparison ({cycleLength}-Month Cycles)
            </h3>
            <svg viewBox={`0 0 ${Math.max(400, data.length * 100)} 250`} className="w-full h-64">
                {/* Y-Axis Line */}
                <line x1="50" y1="20" x2="50" y2="220" stroke="#aaa" />

                {/* X-Axis Line */}
                <line x1="50" y1="220" x2={Math.max(400, data.length * 100) - 10} y2="220" stroke="#aaa" />

                {/* Y-Axis Labels (Max, Mid, Zero) */}
                {[maxValue, maxValue / 2, 0].map((val, i) => (
                    <g key={i}>
                        <text x="45" y={220 - (val / maxValue * 200)} textAnchor="end" className="text-xs fill-gray-600">
                            {currency}{val.toFixed(0)}
                        </text>
                        <line x1="50" x2={Math.max(400, data.length * 100) - 10} y1={220 - (val / maxValue * 200)} y2={220 - (val / maxValue * 200)} stroke="#ccc" strokeDasharray="2" />
                    </g>
                ))}

                {data.map((item, index) => {
                    const x = 70 + index * 100;
                    const height = (item.totalExpense / maxValue) * 200;
                    const y = 220 - height;
                    const barColor = index === data.length - 1 ? 'var(--primary-color)' : '#9CA3AF'; // Current cycle in primary color

                    return (
                        <g key={index} className="transition-transform duration-500 hover:scale-[1.05]">
                            {/* Bar */}
                            <rect x={x} y={y} width="50" height={height} fill={barColor} rx="5" ry="5" />

                            {/* Value Label */}
                            <text x={x + 25} y={y - 5} textAnchor="middle" className="text-xs font-medium fill-gray-800">
                                {currency}{item.totalExpense.toFixed(2)}
                            </text>

                            {/* X-Axis Label */}
                            <text x={x + 25} y="235" textAnchor="middle" className="text-xs fill-gray-600 rotate-0">
                                {item.label}
                            </text>
                        </g>
                    );
                })}
            </svg>
        </div>
    );
};

// --- MAIN APPLICATION COMPONENT ---

const App = () => {
    // --- State Initialization ---
    const [db, setDb] = useState(null);
    const [auth, setAuth] = useState(null);
    const [userId, setUserId] = useState(null);
    const [isAuthReady, setIsAuthReady] = useState(false);

    const [activeTab, setActiveTab] = useState('Overview');
    const [categories, setCategories] = useState([]);
    const [expenses, setExpenses] = useState([]);
    const [budgets, setBudgets] = useState([]);

    const [modal, setModal] = useState(null); // 'addExpense', 'addBudget', 'manageCategories'
    const [currency, setCurrency] = useState('$');
    const [primaryColor, setPrimaryColor] = useState('#4285F4'); // Default Google Blue/Material You Primary

    // --- Firebase Initialization and Authentication ---
    useEffect(() => {
        if (!Object.keys(firebaseConfig).length) return;

        try {
            const app = initializeApp(firebaseConfig);
            const firestore = getFirestore(app);
            const authentication = getAuth(app);

            setDb(firestore);
            setAuth(authentication);

            const unsubscribe = onAuthStateChanged(authentication, async (user) => {
                if (user) {
                    setUserId(user.uid);
                    setIsAuthReady(true);
                } else if (initialAuthToken) {
                    await signInWithCustomToken(authentication, initialAuthToken);
                } else {
                    const anonymousUser = await signInAnonymously(authentication);
                    setUserId(anonymousUser.user.uid);
                    setIsAuthReady(true);
                }
            });

            return () => unsubscribe();
        } catch (error) {
            console.error("Firebase Initialization Error:", error);
        }
    }, []);

    // --- Firestore Data Subscriptions ---
    useEffect(() => {
        if (!db || !userId || !isAuthReady) return;

        // Base path for user-specific private data
        const userBasePath = `/artifacts/${appId}/users/${userId}`;

        // 1. Categories
        const categoriesRef = collection(db, `${userBasePath}/categories`);
        const qCategories = query(categoriesRef);
        const unsubscribeCategories = onSnapshot(qCategories, (snapshot) => {
            const data = snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
            setCategories(data.sort((a, b) => a.name.localeCompare(b.name)));
        }, (error) => console.error("Error fetching categories:", error));

        // 2. Expenses
        const expensesRef = collection(db, `${userBasePath}/expenses`);
        const qExpenses = query(expensesRef);
        const unsubscribeExpenses = onSnapshot(qExpenses, (snapshot) => {
            setExpenses(snapshot.docs.map(doc => ({ id: doc.id, ...doc.data(), date: doc.data().date?.toDate() })));
        }, (error) => console.error("Error fetching expenses:", error));

        // 3. Budgets/Income
        const budgetsRef = collection(db, `${userBasePath}/budgets`);
        const qBudgets = query(budgetsRef);
        const unsubscribeBudgets = onSnapshot(qBudgets, (snapshot) => {
            setBudgets(snapshot.docs.map(doc => ({ id: doc.id, ...doc.data(), date: doc.data().date?.toDate() })));
        }, (error) => console.error("Error fetching budgets:", error));

        return () => {
            unsubscribeCategories();
            unsubscribeExpenses();
            unsubscribeBudgets();
        };
    }, [db, userId, isAuthReady]);

    // --- Core Calculations ---

    // Find the most recent, active budget entry to determine the current cycle and total available budget
    const activeBudgetEntry = useMemo(() => {
        if (budgets.length === 0) return null;
        // Sort by date descending
        const sortedBudgets = [...budgets].sort((a, b) => b.date.getTime() - a.date.getTime());
        return sortedBudgets[0];
    }, [budgets]);

    const { currentCycleStart, currentCycleEnd, totalBudget, currentCycleExpenses, remainingBudget } = useMemo(() => {
        let totalBudget = 0;
        let currentCycleStart = null;
        let currentCycleEnd = null;
        let currentCycleExpenses = 0;

        if (activeBudgetEntry) {
            totalBudget = activeBudgetEntry.amount || 0;
            const cycleMonths = activeBudgetEntry.cycleMonths || 1;
            const { start, end } = getCurrentCycleDates(activeBudgetEntry.date, cycleMonths);

            currentCycleStart = start;
            currentCycleEnd = end;

            currentCycleExpenses = expenses
                .filter(exp => exp.date >= currentCycleStart && exp.date < currentCycleEnd)
                .reduce((sum, exp) => sum + exp.amount, 0);
        }

        const remainingBudget = totalBudget - currentCycleExpenses;

        return {
            currentCycleStart,
            currentCycleEnd,
            totalBudget,
            currentCycleExpenses,
            remainingBudget
        };
    }, [activeBudgetEntry, expenses]);

    const categorySpending = useMemo(() => {
        const spending = categories.map(cat => {
            const totalSpent = expenses
                .filter(exp => exp.categoryId === cat.id && exp.date >= currentCycleStart && exp.date < currentCycleEnd)
                .reduce((sum, exp) => sum + exp.amount, 0);

            return {
                ...cat,
                totalSpent,
                remaining: cat.maxBudget - totalSpent,
                overBudget: totalSpent > cat.maxBudget
            };
        });
        return spending;
    }, [categories, expenses, currentCycleStart, currentCycleEnd]);


    // --- Firestore Handlers ---

    const addExpense = async (amount, categoryId) => {
        if (!db || !userId) return console.error("DB or User ID not ready.");
        if (amount <= 0 || !categoryId) return console.error("Invalid expense data.");

        try {
            const expensesRef = collection(db, `/artifacts/${appId}/users/${userId}/expenses`);
            await addDoc(expensesRef, {
                amount: parseFloat(amount),
                categoryId: categoryId,
                date: serverTimestamp(),
                currency: currency,
            });
        } catch (e) {
            console.error("Error adding document: ", e);
        }
    };

    const addBudget = async (amount, source, cycleMonths) => {
        if (!db || !userId) return console.error("DB or User ID not ready.");
        if (amount <= 0 || !source || !cycleMonths) return console.error("Invalid budget data.");

        try {
            const budgetsRef = collection(db, `/artifacts/${appId}/users/${userId}/budgets`);
            // Add a new budget entry. This implicitly starts a new cycle based on its timestamp.
            await addDoc(budgetsRef, {
                amount: parseFloat(amount),
                source: source,
                cycleMonths: parseInt(cycleMonths, 10),
                date: serverTimestamp(),
                currency: currency,
            });
        } catch (e) {
            console.error("Error adding budget: ", e);
        }
    };

    const manageCategory = async (catData) => {
        if (!db || !userId) return console.error("DB or User ID not ready.");
        const categoryRef = collection(db, `/artifacts/${appId}/users/${userId}/categories`);

        try {
            const dataToSave = {
                name: catData.name,
                maxBudget: parseFloat(catData.maxBudget || 0),
                color: catData.color,
                icon: catData.icon,
                currency: currency,
                // --- NEW FIELD ---
                isFixedExpense: catData.isFixedExpense || false,
                // --- END NEW FIELD ---
            };

            if (catData.id) {
                // Update existing
                await updateDoc(doc(categoryRef, catData.id), dataToSave);
            } else {
                // Add new
                await addDoc(categoryRef, dataToSave);
            }
        } catch (e) {
            console.error("Error managing category: ", e);
        }
    };

    const deleteCategory = async (categoryId) => {
        if (!db || !userId) return console.error("DB or User ID not ready.");

        try {
            // Delete category
            const categoryDocRef = doc(db, `/artifacts/${appId}/users/${userId}/categories`, categoryId);
            await deleteDoc(categoryDocRef);
            // NOTE: Ideally, we should also handle related expenses, but for simplicity, they remain linked to a now-deleted category ID.
        } catch (e) {
            console.error("Error deleting category: ", e);
        }
    };

    // --- MODAL COMPONENTS ---

    const AddExpenseModal = () => {
        const [amount, setAmount] = useState('');
        const [categoryId, setCategoryId] = useState(categories[0]?.id || '');

        const handleSubmit = () => {
            if (amount && categoryId) {
                addExpense(amount, categoryId);
                setModal(null);
            }
        };

        return (
            <Modal title="Add New Expense">
                <Input type="number" placeholder="Amount" value={amount} onChange={e => setAmount(e.target.value)} icon={DollarSign} prefix={currency} />
                <Select value={categoryId} onChange={e => setCategoryId(e.target.value)} icon={ListChecks}>
                    <option value="" disabled>Select Category</option>
                    {categories.map(cat => (
                        <option key={cat.id} value={cat.id}>{cat.name}</option>
                    ))}
                </Select>
                <Button onClick={handleSubmit} label="Log Expense" />
            </Modal>
        );
    };

    const AddBudgetModal = () => {
        const [amount, setAmount] = useState('');
        const [source, setSource] = useState('');
        const [cycleMonths, setCycleMonths] = useState(1);

        const handleSubmit = () => {
            if (amount && source) {
                addBudget(amount, source, cycleMonths);
                setModal(null);
            }
        };

        return (
            <Modal title="Add New Budget / Income">
                <Input type="number" placeholder="Budget Amount" value={amount} onChange={e => setAmount(e.target.value)} icon={DollarSign} prefix={currency} />
                <Input type="text" placeholder="Source (e.g., Salary, Google Pay, Borrowed)" value={source} onChange={e => setSource(e.target.value)} icon={Landmark} />
                <Select value={cycleMonths} onChange={e => setCycleMonths(e.target.value)} icon={Calendar}>
                    <option value={1}>1 Month Cycle</option>
                    <option value={2}>2 Month Cycle</option>
                    <option value={3}>3 Month Cycle</option>
                    <option value={6}>6 Month Cycle (Combined)</option>
                </Select>
                <Button onClick={handleSubmit} label="Start New Budget Cycle" />
            </Modal>
        );
    };

    const ManageCategoryModal = ({ category = {} }) => {
        const [name, setName] = useState(category.name || '');
        const [maxBudget, setMaxBudget] = useState(category.maxBudget || 0);
        const [color, setColor] = useState(category.color || '#A1C9A1');
        const [icon, setIcon] = useState(category.icon || 'ShoppingBag');
        // --- NEW STATE ---
        const [isFixedExpense, setIsFixedExpense] = useState(category.isFixedExpense || false);
        // --- END NEW STATE ---

        const iconOptions = ['ShoppingBag', 'Lightbulb', 'Utensils', 'Droplet', 'CreditCard', 'Banknote', 'DollarSign'];

        const handleSubmit = () => {
            if (name && color) {
                // --- UPDATED PAYLOAD ---
                manageCategory({ id: category.id, name, maxBudget, color, icon, isFixedExpense });
                // --- END UPDATED PAYLOAD ---
                setModal(null);
            }
        };

        const handleDelete = () => {
            // Using a simple window.confirm() for demonstration, ideally this would be a custom modal
            if (window.confirm(`Are you sure you want to delete the category "${name}"? This cannot be undone.`)) {
                deleteCategory(category.id);
                setModal(null);
            }
        };

        return (
            <Modal title={category.id ? "Edit Category" : "Add New Category"}>
                <Input type="text" placeholder="Category Name (e.g., Groceries)" value={name} onChange={e => setName(e.target.value)} icon={ListChecks} />
                <Input type="number" placeholder="Max Budget" value={maxBudget} onChange={e => setMaxBudget(e.target.value)} icon={DollarSign} prefix={currency} />

                <div className="flex items-center space-x-4 mb-4">
                    <label className="text-gray-600 font-medium">Color:</label>
                    <input type="color" value={color} onChange={e => setColor(e.target.value)}
                        className="w-12 h-8 rounded-md border-2 border-gray-300" />
                    <span className="text-gray-600 font-medium ml-4">Icon:</span>
                    <Select value={icon} onChange={e => setIcon(e.target.value)} icon={getIconComponent(icon)}>
                        {iconOptions.map(opt => {
                            const IconComponent = getIconComponent(opt);
                            return <option key={opt} value={opt}>{opt}</option>;
                        })}
                    </Select>
                </div>

                {/* --- NEW FIXED EXPENSE CHECKBOX --- */}
                <div className="flex items-center p-3 bg-gray-100 dark:bg-gray-700 rounded-xl">
                    <input
                        type="checkbox"
                        id="isFixed"
                        checked={isFixedExpense}
                        onChange={(e) => setIsFixedExpense(e.target.checked)}
                        className="h-5 w-5 rounded text-blue-600 border-gray-300 focus:ring-blue-500"
                        style={{ '--tw-ring-color': primaryColor }}
                    />
                    <label htmlFor="isFixed" className="ml-3 text-sm font-medium text-gray-700 dark:text-gray-300">
                        Is this a **Fixed Expense** (e.g., Monthly Bill)?
                    </label>
                </div>
                {/* --- END NEW FIXED EXPENSE CHECKBOX --- */}

                <div className="flex justify-between items-center mt-6">
                    <Button onClick={handleSubmit} label={category.id ? "Save Changes" : "Create Category"} />
                    {category.id && <button onClick={handleDelete} className="text-red-600 text-sm font-medium hover:opacity-80 transition">Delete</button>}
                </div>
            </Modal>
        );
    };

    const Modal = ({ children, title }) => (
        <div className="fixed inset-0 bg-black/60 z-50 flex items-center justify-center p-4" onClick={() => setModal(null)}>
            <div className="bg-white dark:bg-gray-800 p-6 rounded-3xl shadow-2xl w-full max-w-sm transform transition-all duration-300 scale-100" onClick={e => e.stopPropagation()}>
                <div className="flex justify-between items-center mb-6">
                    <h2 className="text-2xl font-bold text-gray-900 dark:text-white" style={{ color: primaryColor }}>{title}</h2>
                    <button onClick={() => setModal(null)} className="p-1 rounded-full text-gray-500 hover:bg-gray-100 dark:hover:bg-gray-700">
                        <X size={24} />
                    </button>
                </div>
                <div className="space-y-4">
                    {children}
                </div>
            </div>
        </div>
    );

    // --- GENERIC UI COMPONENTS ---

    const Button = ({ onClick, label, icon: Icon, className = '' }) => (
        <button
            onClick={onClick}
            className={`w-full py-3 px-4 rounded-xl text-white font-semibold flex items-center justify-center transition-all duration-200 shadow-md active:scale-[0.98] ${className}`}
            style={{ backgroundColor: primaryColor }}
        >
            {Icon && <Icon size={20} className="mr-2" />}
            {label}
        </button>
    );

    const Input = ({ icon: Icon, prefix, ...props }) => (
        <div className="relative">
            <Icon size={20} className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400" />
            {prefix && <span className="absolute left-10 top-1/2 transform -translate-y-1/2 text-gray-700 font-semibold">{prefix}</span>}
            <input
                {...props}
                className={`w-full bg-gray-100 dark:bg-gray-700 text-gray-900 dark:text-white rounded-xl py-3 px-12 focus:ring-2 focus:ring-offset-2 focus:outline-none focus:ring-opacity-75 ${prefix ? 'pl-16' : ''}`}
                style={{ '--tw-ring-color': primaryColor }}
            />
        </div>
    );

    const Select = ({ icon: Icon, children, ...props }) => (
        <div className="relative">
            <Icon size={20} className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 pointer-events-none" />
            <select
                {...props}
                className="w-full bg-gray-100 dark:bg-gray-700 text-gray-900 dark:text-white rounded-xl py-3 px-12 appearance-none focus:ring-2 focus:ring-offset-2 focus:outline-none focus:ring-opacity-75"
                style={{ '--tw-ring-color': primaryColor }}
            >
                {children}
            </select>
        </div>
    );

    // --- TAB CONTENT COMPONENTS ---

    const OverviewTab = () => {
        const cycleLabel = activeBudgetEntry ? `${activeBudgetEntry.cycleMonths} Month Cycle` : 'No Active Budget';

        // Calculate total fixed budget for display
        const totalFixedBudget = categories
            .filter(cat => cat.isFixedExpense)
            .reduce((sum, cat) => sum + (cat.maxBudget || 0), 0);

        // Calculate total fixed expenses for display
        const totalFixedExpenses = categorySpending
            .filter(cat => cat.isFixedExpense)
            .reduce((sum, cat) => sum + cat.totalSpent, 0);

        return (
            <div className="p-4 space-y-4">
                <div className="p-6 rounded-3xl shadow-xl transition-all duration-300" style={{ backgroundColor: primaryColor, color: getContrastColor(primaryColor) }}>
                    <p className="text-opacity-70 text-sm font-medium">{cycleLabel}</p>
                    {activeBudgetEntry && <p className="text-opacity-70 text-sm">Cycle: {currentCycleStart?.toLocaleDateString()} - {currentCycleEnd?.toLocaleDateString()}</p>}
                    <h1 className="text-5xl font-extrabold mt-2">{currency}{remainingBudget.toFixed(2)}</h1>
                    <p className="text-opacity-80 text-lg">Remaining Budget</p>
                </div>

                <div className="grid grid-cols-2 gap-4">
                    <div className="p-4 bg-white/70 dark:bg-gray-700 rounded-2xl shadow-md">
                        <p className="text-sm text-gray-600 dark:text-gray-300">Total Budget</p>
                        <p className="text-2xl font-bold text-gray-900 dark:text-white" style={{ color: primaryColor }}>{currency}{totalBudget.toFixed(2)}</p>
                        <p className="text-xs text-gray-500 dark:text-gray-400 truncate">Source: {activeBudgetEntry?.source || 'N/A'}</p>
                    </div>
                    <div className="p-4 bg-white/70 dark:bg-gray-700 rounded-2xl shadow-md">
                        <p className="text-sm text-gray-600 dark:text-gray-300">Total Expenses</p>
                        <p className={`text-2xl font-bold ${currentCycleExpenses > totalBudget ? 'text-red-500' : 'text-gray-900 dark:text-white'}`}>{currency}{currentCycleExpenses.toFixed(2)}</p>
                    </div>
                    {totalFixedBudget > 0 && (
                        <div className="p-4 bg-white/70 dark:bg-gray-700 rounded-2xl shadow-md col-span-2">
                            <p className="text-sm text-gray-600 dark:text-gray-300 font-bold">Fixed Expenses Summary</p>
                            <div className='flex justify-between items-center'>
                                <p className="text-xl font-bold text-gray-900 dark:text-white">Fixed Budget: {currency}{totalFixedBudget.toFixed(2)}</p>
                                <p className="text-xl font-bold text-gray-900 dark:text-white">Spent: {currency}{totalFixedExpenses.toFixed(2)}</p>
                            </div>
                        </div>
                    )}
                </div>

                <div className="p-4 bg-white/70 dark:bg-gray-700 rounded-2xl shadow-md">
                    <h3 className="text-lg font-semibold mb-2" style={{ color: primaryColor }}>Category Budget Summary</h3>
                    {categorySpending.length > 0 ? (
                        <ul className="space-y-2">
                            {categorySpending.slice(0, 5).map(cat => (
                                <li key={cat.id} className="flex justify-between text-sm">
                                    <span className="font-medium text-gray-700 dark:text-gray-300">{cat.name} {cat.isFixedExpense && <span className='text-xs text-blue-500'>(Fixed)</span>}</span>
                                    <span className={cat.overBudget ? 'text-red-500 font-bold' : 'text-gray-900 dark:text-white'}>{currency}{(cat.maxBudget - cat.totalSpent).toFixed(2)} left</span>
                                </li>
                            ))}
                        </ul>
                    ) : (
                        <p className="text-gray-500 text-sm">Define categories in the Allocate tab to see a breakdown.</p>
                    )}
                </div>
            </div>
        );
    };

    const ExpensesTab = () => {
        return (
            <div className="p-4 space-y-4">
                <h2 className="text-2xl font-bold" style={{ color: primaryColor }}>Spending Breakdown</h2>
                {categorySpending.length > 0 ? categorySpending.map(cat => {
                    const percentage = cat.maxBudget > 0 ? (cat.totalSpent / cat.maxBudget) * 100 : (cat.totalSpent > 0 ? 100 : 0);
                    const barColor = cat.overBudget ? 'bg-red-500' : cat.color;
                    const Icon = getIconComponent(cat.icon);

                    return (
                        <div key={cat.id} className="bg-white/70 dark:bg-gray-700 p-4 rounded-2xl shadow-md">
                            <div className="flex items-center justify-between mb-2">
                                <div className="flex items-center">
                                    <div className="p-2 rounded-full mr-3 shadow-inner" style={{ backgroundColor: cat.color, color: getContrastColor(cat.color) }}>
                                        <Icon size={20} />
                                    </div>
                                    <h3 className="text-lg font-semibold text-gray-900 dark:text-white">{cat.name} {cat.isFixedExpense && <span className='text-xs text-blue-500'>(Fixed)</span>}</h3>
                                </div>
                                <span className={`font-bold text-lg ${cat.overBudget ? 'text-red-500' : 'text-gray-900 dark:text-white'}`}>
                                    {currency}{cat.totalSpent.toFixed(2)}
                                </span>
                            </div>
                            <div className="text-sm text-gray-500 dark:text-gray-400 mb-1 flex justify-between">
                                <span>{currency}{cat.maxBudget.toFixed(2)} Budget</span>
                                <span>{cat.remaining.toFixed(2)} Remaining</span>
                            </div>
                            <div className="w-full bg-gray-200 rounded-full h-2.5">
                                <div
                                    className={`h-2.5 rounded-full transition-all duration-500`}
                                    style={{ width: `${Math.min(percentage, 100)}%`, backgroundColor: barColor }}
                                ></div>
                                {cat.overBudget && <div className="text-xs text-red-500 font-medium mt-1">Exceeded budget by {currency}{(cat.totalSpent - cat.maxBudget).toFixed(2)}</div>}
                            </div>
                        </div>
                    );
                }) : (
                    <div className="text-center p-8 text-gray-500 bg-white/70 dark:bg-gray-700 rounded-2xl">
                        No categories defined. Go to the **Allocate** tab to get started.
                    </div>
                )}
            </div>
        );
    };

    const AllocateTab = () => {
        return (
            <div className="p-4 space-y-4">
                <h2 className="text-2xl font-bold mb-4" style={{ color: primaryColor }}>Category Allocation</h2>
                <div className="grid grid-cols-1 gap-4">
                    {categories.length > 0 ? categories.map(cat => {
                        const Icon = getIconComponent(cat.icon);
                        return (
                            <div
                                key={cat.id}
                                className="bg-white/70 dark:bg-gray-700 p-4 rounded-2xl shadow-md flex items-center justify-between transition-all duration-200 hover:shadow-lg cursor-pointer"
                                onClick={() => setModal(<ManageCategoryModal category={cat} />)}
                            >
                                <div className="flex items-center">
                                    <div className="p-2 rounded-xl mr-3" style={{ backgroundColor: cat.color, color: getContrastColor(cat.color) }}>
                                        <Icon size={24} />
                                    </div>
                                    <div>
                                        <h3 className="text-lg font-semibold text-gray-900 dark:text-white">{cat.name} {cat.isFixedExpense && <span className='text-xs text-blue-500'>(Fixed)</span>}</h3>
                                        <p className="text-sm text-gray-500 dark:text-gray-400">{currency}{cat.maxBudget.toFixed(2)} Budget</p>
                                    </div>
                                </div>
                                <Pencil size={20} className="text-gray-400" />
                            </div>
                        );
                    }) : (
                        <div className="text-center p-8 text-gray-500 bg-white/70 dark:bg-gray-700 rounded-2xl">
                            Tap the pencil button to add your first expense category.
                        </div>
                    )}
                </div>
            </div>
        );
    };

    const AnalysisTab = () => {
        const pieData = [
            { name: 'Spent', value: currentCycleExpenses, color: primaryColor },
            { name: 'Remaining Budget', value: Math.max(0, remainingBudget), color: '#FCD34D' }, // Amber
            ...(remainingBudget < 0 ? [{ name: 'Overspent', value: Math.abs(remainingBudget), color: '#EF4444' }] : []),
        ];

        // Prepare data for the Bar Chart (Current cycle vs. 3 previous cycles)
        const budgetCycleMonths = activeBudgetEntry?.cycleMonths || 1;
        const barChartData = useMemo(() => {
            if (!activeBudgetEntry) return [];

            const cycles = [];
            let currentCycleEnd = new Date(currentCycleStart);
            let currentCycleStartCalc = new Date(currentCycleEnd);
            currentCycleStartCalc.setMonth(currentCycleStartCalc.getMonth() - budgetCycleMonths);

            // Iterate backwards for previous 3 cycles
            for (let i = 0; i < 4; i++) {
                const cycleExpenses = expenses
                    .filter(exp => exp.date >= currentCycleStartCalc && exp.date < currentCycleEnd)
                    .reduce((sum, exp) => sum + exp.amount, 0);

                const label = i === 0
                    ? 'Current'
                    : `Prev ${i}`;

                cycles.unshift({
                    label: label,
                    totalExpense: cycleExpenses,
                });

                // Move one cycle back
                currentCycleEnd = new Date(currentCycleStartCalc);
                currentCycleStartCalc.setMonth(currentCycleStartCalc.getMonth() - budgetCycleMonths);
            }

            // The last cycle is the current one, previous cycles are historical.
            return cycles.slice(1);
        }, [expenses, activeBudgetEntry, budgetCycleMonths, currentCycleStart]);


        return (
            <div className="p-4 space-y-6">
                <h2 className="text-2xl font-bold mb-4" style={{ color: primaryColor }}>Financial Analysis</h2>

                <div className="bg-white/70 dark:bg-gray-700 p-4 rounded-2xl shadow-md">
                    <h3 className="text-xl font-semibold mb-4 text-center">Budget Summary Pie Chart</h3>
                    <PieChartComponent data={pieData} />
                </div>

                <div className="bg-white/70 dark:bg-gray-700 p-4 rounded-2xl shadow-md">
                    <BarChartComponent data={barChartData} cycleLength={budgetCycleMonths} currency={currency} />
                </div>

                <div className="bg-white/70 dark:bg-gray-700 p-4 rounded-2xl shadow-md">
                    <h3 className="text-lg font-semibold mb-2" style={{ color: primaryColor }}>Settings</h3>
                    <Select value={currency} onChange={e => setCurrency(e.target.value)} icon={DollarSign}>
                        <option value="$">USD ($)</option>
                        <option value="€">EUR (€)</option>
                        <option value="£">GBP (£)</option>
                        <option value="₹">INR (₹)</option>
                    </Select>
                    <div className="mt-4">
                        <label className="text-gray-600 dark:text-gray-300 block mb-1 text-sm font-medium">App Primary Color (Material You Theme)</label>
                        <input type="color" value={primaryColor} onChange={e => setPrimaryColor(e.target.value)}
                            className="w-full h-10 rounded-xl border-2 border-gray-300" />
                    </div>
                </div>
            </div>
        );
    };


    // --- Floating Action Button (FAB) Logic ---

    const FAB = () => {
        let icon = null;
        let action = () => setModal(null);
        let label = null;

        if (activeTab === 'Overview') {
            // Plus button with a menu
            icon = <Plus size={28} />;
            action = () => setModal(modal === 'fabMenu' ? null : 'fabMenu');
        } else if (activeTab === 'Expenses') {
            // "Log" button
            icon = <DollarSign size={20} />;
            label = 'LOG';
            action = () => setModal(<AddExpenseModal />);
        } else if (activeTab === 'Allocate') {
            // Pencil button
            icon = <Pencil size={24} />;
            action = () => setModal(<ManageCategoryModal />);
        } else if (activeTab === 'Analysis') {
            // Settings button
            icon = <Settings size={24} />;
            action = () => setModal(null); // No specific action for analysis FAB, just a button for visual consistency
        }

        return (
            <div className="fixed bottom-20 right-4 z-40">
                {modal === 'fabMenu' && activeTab === 'Overview' && (
                    <div className="mb-4 space-y-2">
                        <Button onClick={() => setModal(<AddBudgetModal />)} label="Add Budget" className="w-auto px-6" />
                        <Button onClick={() => setModal(<AddExpenseModal />)} label="Add Expense" className="w-auto px-6" />
                    </div>
                )}
                <button
                    onClick={action}
                    className={`h-16 rounded-full shadow-2xl flex items-center justify-center transition-all duration-300 ease-in-out hover:scale-105 active:scale-95 ${label ? 'w-auto px-6' : 'w-16'}`}
                    style={{ backgroundColor: primaryColor, color: getContrastColor(primaryColor) }}
                >
                    {icon}
                    {label && <span className="ml-2 text-lg font-bold">{label}</span>}
                </button>
            </div>
        );
    };

    // --- Main Render ---

    const renderTabContent = () => {
        if (!isAuthReady) {
            return (
                <div className="text-center p-8 text-gray-500">
                    <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-gray-900 mx-auto" style={{ borderBottomColor: primaryColor }}></div>
                    <p className="mt-4">Loading application and user data...</p>
                </div>
            );
        }

        switch (activeTab) {
            case 'Overview': return <OverviewTab />;
            case 'Expenses': return <ExpensesTab />;
            case 'Allocate': return <AllocateTab />;
            case 'Analysis': return <AnalysisTab />;
            default: return <OverviewTab />;
        }
    };

    return (
        <div className="min-h-screen bg-gray-50 dark:bg-gray-900 font-sans" style={{ '--primary-color': primaryColor }}>
            <style>{`
                /* Material You style override for active elements */
                .tab-button.active {
                    color: var(--primary-color);
                    background-color: var(--primary-color) !important;
                    color: ${getContrastColor(primaryColor)} !important;
                }
                .tab-button {
                    transition: all 0.2s;
                }
                .bg-primary { background-color: var(--primary-color); }
            `}</style>

            <header className="p-4 flex justify-between items-center sticky top-0 bg-white/95 dark:bg-gray-900/95 backdrop-blur-sm z-30 shadow-sm">
                <h1 className="text-2xl font-bold" style={{ color: primaryColor }}>Finance Pilot</h1>
                <div className="flex items-center space-x-2 text-sm text-gray-500">
                    <User size={18} />
                    <span className="truncate max-w-[100px] sm:max-w-none">{userId || 'Loading...'}</span>
                </div>
            </header>

            <main className="pb-24 max-w-xl mx-auto">
                {renderTabContent()}
            </main>

            {/* Bottom Navigation Bar */}
            <div className="fixed bottom-0 left-0 right-0 h-16 bg-white dark:bg-gray-800 border-t border-gray-200 dark:border-gray-700 shadow-xl z-40 max-w-xl mx-auto">
                <nav className="flex justify-around h-full">
                    {[{ name: 'Overview', icon: Home }, { name: 'Expenses', icon: ListChecks }, { name: 'Allocate', icon: Pencil }, { name: 'Analysis', icon: PieChart }].map(tab => (
                        <button
                            key={tab.name}
                            className={`flex flex-col items-center justify-center text-xs w-1/4 h-full tab-button ${activeTab === tab.name ? 'active' : 'text-gray-500 dark:text-gray-400'}`}
                            onClick={() => { setActiveTab(tab.name); setModal(null); }}
                        >
                            <tab.icon size={24} className="mb-0.5" />
                            <span className='font-medium'>{tab.name}</span>
                        </button>
                    ))}
                </nav>
            </div>

            {/* FAB and Modals */}
            <FAB />
            {modal && (modal !== 'fabMenu') && modal}
        </div>
    );
};

export default App;
\end{lstlisting}

\end{document}